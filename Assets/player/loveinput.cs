//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/player/loveinput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Loveinput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Loveinput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""loveinput"",
    ""maps"": [
        {
            ""name"": ""Love"",
            ""id"": ""09866f02-4f9b-42c3-9313-7eb3610a2eb0"",
            ""actions"": [
                {
                    ""name"": ""love"",
                    ""type"": ""Value"",
                    ""id"": ""cc036a09-09fa-4886-bdd5-544ae049c898"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""zhengjin"",
                    ""type"": ""Button"",
                    ""id"": ""d78b6043-f45a-405e-ba18-4612ec0cf2af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""music"",
                    ""type"": ""Button"",
                    ""id"": ""a2c6353a-b6d8-4922-b64f-81f1a7d04963"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b47195b6-a01d-44db-9af7-78af96211175"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""love"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8229161-3371-4f1b-86c8-0d91068e7641"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""zhengjin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16ec8572-552f-4a45-acf8-af1cd587f687"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""music"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Love
        m_Love = asset.FindActionMap("Love", throwIfNotFound: true);
        m_Love_love = m_Love.FindAction("love", throwIfNotFound: true);
        m_Love_zhengjin = m_Love.FindAction("zhengjin", throwIfNotFound: true);
        m_Love_music = m_Love.FindAction("music", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Love
    private readonly InputActionMap m_Love;
    private List<ILoveActions> m_LoveActionsCallbackInterfaces = new List<ILoveActions>();
    private readonly InputAction m_Love_love;
    private readonly InputAction m_Love_zhengjin;
    private readonly InputAction m_Love_music;
    public struct LoveActions
    {
        private @Loveinput m_Wrapper;
        public LoveActions(@Loveinput wrapper) { m_Wrapper = wrapper; }
        public InputAction @love => m_Wrapper.m_Love_love;
        public InputAction @zhengjin => m_Wrapper.m_Love_zhengjin;
        public InputAction @music => m_Wrapper.m_Love_music;
        public InputActionMap Get() { return m_Wrapper.m_Love; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LoveActions set) { return set.Get(); }
        public void AddCallbacks(ILoveActions instance)
        {
            if (instance == null || m_Wrapper.m_LoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LoveActionsCallbackInterfaces.Add(instance);
            @love.started += instance.OnLove;
            @love.performed += instance.OnLove;
            @love.canceled += instance.OnLove;
            @zhengjin.started += instance.OnZhengjin;
            @zhengjin.performed += instance.OnZhengjin;
            @zhengjin.canceled += instance.OnZhengjin;
            @music.started += instance.OnMusic;
            @music.performed += instance.OnMusic;
            @music.canceled += instance.OnMusic;
        }

        private void UnregisterCallbacks(ILoveActions instance)
        {
            @love.started -= instance.OnLove;
            @love.performed -= instance.OnLove;
            @love.canceled -= instance.OnLove;
            @zhengjin.started -= instance.OnZhengjin;
            @zhengjin.performed -= instance.OnZhengjin;
            @zhengjin.canceled -= instance.OnZhengjin;
            @music.started -= instance.OnMusic;
            @music.performed -= instance.OnMusic;
            @music.canceled -= instance.OnMusic;
        }

        public void RemoveCallbacks(ILoveActions instance)
        {
            if (m_Wrapper.m_LoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILoveActions instance)
        {
            foreach (var item in m_Wrapper.m_LoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LoveActions @Love => new LoveActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface ILoveActions
    {
        void OnLove(InputAction.CallbackContext context);
        void OnZhengjin(InputAction.CallbackContext context);
        void OnMusic(InputAction.CallbackContext context);
    }
}
